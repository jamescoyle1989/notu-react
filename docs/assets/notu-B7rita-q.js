var _=Object.defineProperty,m=(n,t,e)=>t in n?_(n,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):n[t]=e,i=(n,t,e)=>(m(n,typeof t!="symbol"?t+"":t,e),e);class h{constructor(){i(this,"state","NEW")}new(){return this.state="NEW",this}clean(){return this.state="CLEAN",this}dirty(){return this.state="DIRTY",this}delete(){return this.state="DELETED",this}get isNew(){return this.state=="NEW"}get isClean(){return this.state=="CLEAN"}get isDirty(){return this.state=="DIRTY"}get isDeleted(){return this.state=="DELETED"}validate(t=!1){return!0}}class d extends h{constructor(t,e){super(),i(this,"id",0),i(this,"_name",""),i(this,"_description",""),i(this,"_type","TEXT"),i(this,"_spaceId",0),i(this,"_space",null),t&&(this.name=t),e&&(this.description=e)}get name(){return this._name}set name(t){t!==this._name&&(this._name=t,this.isClean&&this.dirty())}get description(){return this._description}set description(t){t!==this._description&&(this._description=t,this.isClean&&this.dirty())}get type(){return this._type}set type(t){if(!this.isNew)throw Error("Cannot change an attribute's type once it has been created.");this._type=t}get isText(){return this.type=="TEXT"}get isNumber(){return this.type=="NUMBER"}get isBoolean(){return this.type=="BOOLEAN"}get isDate(){return this.type=="DATE"}asText(){return this.type="TEXT",this}asNumber(){return this.type="NUMBER",this}asBoolean(){return this.type="BOOLEAN",this}asDate(){return this.type="DATE",this}get spaceId(){return this._spaceId}set spaceId(t){var e;t!==this._spaceId&&(this._spaceId=t,t!==((e=this.space)==null?void 0:e.id)&&(this._space=null),this.isClean&&this.dirty())}get space(){return this._space}set space(t){this._space=t,this.spaceId=(t==null?void 0:t.id)??0}in(t){return typeof t=="number"?this.spaceId=t:this.space=t,this}duplicate(){const t=new d;return t.id=this.id,t.name=this.name,t.description=this.description,t.type=this.type,this.space?t.space=this.space:t.spaceId=this.spaceId,t.state=this.state,t}validate(t=!1){let e=null;if(this.spaceId<=0?e="Note spaceId must be greater than zero.":!this.isNew&&this.id<=0&&(e="Attr id must be greater than zero if in non-new state."),t&&e!=null)throw Error(e);return e==null}get defaultValue(){switch(this.type){case"TEXT":return"";case"NUMBER":return 0;case"BOOLEAN":return!1;case"DATE":return new Date}}toJSON(){return{state:this.state,id:this.id,name:this.name,description:this.description,type:this.type,spaceId:this.spaceId}}static fromJSON(t){const e=new d(t.name,t.description);return e.type=t.type,e.spaceId=t.spaceId,e.id=t.id,e.state=t.state,e}}class u extends h{constructor(t=""){super(),i(this,"id",0),i(this,"_name",""),this._name=t}get name(){return this._name}set name(t){t!==this._name&&(this._name=t,this.isClean&&this.dirty())}duplicate(){const t=new u;return t.id=this.id,t.name=this.name,t.state=this.state,t}validate(t=!1){let e=null;if(!this.isNew&&this.id<=0&&(e="Space id must be greater than zero if in non-new state."),t&&e!=null)throw Error(e);return e==null}toJSON(){return{state:this.state,id:this.id,name:this.name}}static fromJSON(t){const e=new u(t.name);return e.id=t.id,e.state=t.state,e}}class o extends h{constructor(t,e,s){super(),i(this,"_noteId",0),i(this,"_note",null),i(this,"_attrId",0),i(this,"_attr",null),i(this,"_value",null),i(this,"_tagId",null),i(this,"_tag",null),t!=null&&t!=null&&(typeof t=="number"?this.noteId=t:this.note=t),e!=null&&e!=null&&(typeof e=="number"?this.attrId=e:this.attr=e),s!=null&&s!=null&&(this.value=s)}get noteId(){return this._noteId}set noteId(t){var e;t!==this._noteId&&(this._noteId=t,t!==((e=this.note)==null?void 0:e.id)&&(this._note=null),this.isClean&&this.dirty())}get note(){return this._note}set note(t){this._note=t,this.noteId=(t==null?void 0:t.id)??0}get attrId(){return this._attrId}set attrId(t){var e;t!==this._attrId&&(this._attrId=t,t!==((e=this.attr)==null?void 0:e.id)&&(this._attr=null),this.isClean&&this.dirty())}get attr(){return this._attr}set attr(t){const e=this._attr;this._attr=t,t?t.id!=this.attrId&&(!e||t.type!=e.type)&&(this.value=t.defaultValue):this.value=null,this.attrId=(t==null?void 0:t.id)??0}get value(){return this._value}set value(t){t!=this._value&&(this._value=t,this.isClean&&this.dirty())}withValue(t){return this.value=t,this}get tagId(){return this._tagId}set tagId(t){var e;t!==this._tagId&&(this._tagId=t,t!==((e=this.tag)==null?void 0:e.id)&&(this._tag=null),this.isClean&&this.dirty())}get tag(){return this._tag}set tag(t){this._tag=t,this.tagId=(t==null?void 0:t.id)??null}onTag(t){return typeof t=="number"?this.tagId=t:this.tag=t,this}duplicate(){const t=new o;return t.noteId=this.noteId,this.attr?t.attr=this.attr:t.attrId=this.attrId,this.tag?t.tag=this.tag:t.tagId=this.tagId,t.value=this.value,t.state=this.state,t}validate(t=!1){let e=null;if(this.noteId<=0&&!this.isNew?e="NoteAttr noteId must be greater than zero":this.attrId<=0&&(e="NoteAttr attrId must be greater than zero"),t&&e!=null)throw Error(e);return e==null}toJSON(){return{state:this.state,noteId:this.noteId,attrId:this.attrId,tagId:this.tagId,value:this.value}}static fromJSON(t){const e=new o(t.noteId,t.attrId,t.value);return e.tagId=t.tagId,e.state=t.state,e}}class l extends h{constructor(t,e){super(),i(this,"_noteId",0),i(this,"_note",null),i(this,"_tagId",0),i(this,"_tag",null),t!=null&&t!=null&&(typeof t=="number"?this.noteId=t:this.note=t),e!=null&&e!=null&&(typeof e=="number"?this.tagId=e:this.tag=e)}get noteId(){return this._noteId}set noteId(t){var e;t!==this._noteId&&(this._noteId=t,t!==((e=this.note)==null?void 0:e.id)&&(this._note=null),this.isClean&&this.dirty())}get note(){return this._note}set note(t){this._note=t,this.noteId=(t==null?void 0:t.id)??0}get tagId(){return this._tagId}set tagId(t){var e;t!==this._tagId&&(this._tagId=t,t!==((e=this.tag)==null?void 0:e.id)&&(this._tag=null),this.isClean&&this.dirty())}get tag(){return this._tag}set tag(t){this._tag=t,this.tagId=(t==null?void 0:t.id)??0}get attrs(){return this.note?this.note.attrs.filter(t=>t.tagId==this.tagId):[]}addAttr(t){if(!this.note)throw new Error("Cannot call addAttr on NoteTag where note property has not been set");const e=this.note.addAttr(t);return e.tag=this.tag,e}duplicate(){const t=new l;return t.noteId=this.noteId,this.tag?t.tag=this.tag:t.tagId=this.tagId,t}validate(t=!1){let e=null;if(this.noteId<=0&&!this.isNew?e="NoteTag noteId must be greater than zero":this.tagId<=0?e="NoteTag tagId must be greater than zero":this.noteId==this.tagId&&(e="NoteTag cannot link a note to its own tag"),t&&e!=null)throw Error(e);return e==null}toJSON(){return{state:this.state,noteId:this.noteId,tagId:this.tagId}}static fromJSON(t){const e=new l(t.noteId,t.tagId);return e.state=t.state,e}}class r extends h{constructor(t=""){super(),i(this,"_id",0),i(this,"_spaceId",0),i(this,"_space",null),i(this,"_name",""),i(this,"_color",null),i(this,"_isPublic",!0),this._name=t}get id(){return this._id}set id(t){t!==this._id&&(this._id=t,this.isClean&&this.dirty())}get spaceId(){return this._spaceId}set spaceId(t){var e;t!==this._spaceId&&(this._spaceId=t,t!==((e=this.space)==null?void 0:e.id)&&(this._space=null),this.isClean&&this.dirty())}get space(){return this._space}set space(t){this._space=t,this.spaceId=(t==null?void 0:t.id)??0}in(t){return typeof t=="number"?this.spaceId=t:this.space=t,this}get name(){return this._name}set name(t){t!==this._name&&(this._name=t,this.isClean&&this.dirty())}getQualifiedName(t){return t==this.spaceId?this.name:`${this.space.name}.${this.name}`}get color(){return this._color}set color(t){t!==this._color&&(this._color=t,this.isClean&&this.dirty())}get isPublic(){return this._isPublic}set isPublic(t){t!==this._isPublic&&(this._isPublic=t,this.isClean&&this.dirty())}asPublic(){return this.isPublic=!0,this}asPrivate(){return this.isPublic=!1,this}duplicate(){const t=new r(this.name);return t.id=this.id,t.state=this.state,t.color=this.color,t.space=this.space,t.isPublic=this.isPublic,t}validate(t=!1){let e=null;if(!this.isNew&&this.id<=0?e="Tag id must be greater than zero if in non-new state.":!this.name||!/^[a-zA-Z][a-zA-Z0-9 ]*[a-zA-Z0-9]?$/.test(this.name)?e="Tag name is invalid, must only contain letters, numbers, and spaces, starting with a letter":this.color&&!/^#?[A-z0-9]{6}$/.test(this.color)&&(e="Tag color is invalid, must be a 6 character hexadecimal."),t&&e!=null)throw Error(e);return e==null}getColorInt(){let t=this.color;return t?(t.startsWith("#")&&(t=t.substring(1)),parseInt(t,16)):null}toJSON(){return{state:this.state,id:this.id,name:this.name,spaceId:this.spaceId,color:this.color,isPublic:this.isPublic}}static fromJSON(t){const e=new r(t.name);return e.id=t.id,e.spaceId=t.spaceId,e.color=t.color,e.isPublic=t.isPublic,e.state=t.state,e}}class p extends h{constructor(t){super(),i(this,"_id",0),i(this,"_date",new Date),i(this,"_text",""),i(this,"_spaceId",0),i(this,"_space",null),i(this,"_ownTag",null),i(this,"_tags",[]),i(this,"_attrs",[]),t&&(this.text=t)}get id(){return this._id}set id(t){this._id=t,this.ownTag&&(this.ownTag.id=t)}get date(){return this._date}set date(t){t!==this._date&&(this._date=t,this.isClean&&this.dirty())}at(t){return this.date=t,this}get text(){return this._text}set text(t){t!==this._text&&(this._text=t,this.isClean&&this.dirty())}get spaceId(){return this._spaceId}set spaceId(t){var e;t!==this._spaceId&&(this._spaceId=t,t!==((e=this.space)==null?void 0:e.id)&&(this._space=null),this.isClean&&this.dirty(),this._setOwnTagSpace())}get space(){return this._space}set space(t){this._space=t,this.spaceId=(t==null?void 0:t.id)??0}in(t){return typeof t=="number"?this.spaceId=t:this.space=t,this}get ownTag(){return this._ownTag}setOwnTag(t){if(typeof t=="string")this.ownTag==null&&(this._ownTag=new r),this.ownTag.name=t,this.ownTag.id=this.id,this._setOwnTagSpace();else{if(this.ownTag)throw new Error("Note has already had its tag set. If you would like to change the tag name, call setTag with just a string specifying the new tag name.");if(t.id!=0&&t.id!=this.id)throw new Error("Attempted to set tag to note with non-matching ID. Added tag id must either match the note id, which indicates that the tag has already been added to the note. Otherwise the tag id must be zero, indicating that the tag still needs to be added.");this._ownTag=t}return this}removeOwnTag(){this.ownTag&&(this.ownTag.isNew?this._ownTag=null:this.ownTag.delete())}_setOwnTagSpace(){this.ownTag&&(this.space?this.ownTag.space=this.space:this.ownTag.spaceId=this.spaceId)}get tags(){return this._tags.filter(t=>!t.isDeleted)}addTag(t){if(t.isDeleted)throw Error("Cannot add a tag marked as deleted to a note");if(t.isNew)throw Error("Cannot add a tag that hasn't yet been saved to a note");if(t.id==this.id)throw Error("Note cannot add its own tag as a linked tag");if(!t.isPublic&&t.spaceId!=this.spaceId)throw Error("Cannot add a private tag from another space");let e=this._tags.find(s=>s.tagId==t.id);return e?(e.isDeleted&&e.dirty(),e):(e=new l,e.note=this,e.tag=t,this._tags.push(e),e)}removeTag(t){const e=this._tags.find(s=>s.tagId==t.id);if(!e)return this;e.isNew?this._tags=this._tags.filter(s=>s!==e):e.delete();for(const s of this._attrs.filter(a=>!a.isDeleted&&a.tagId==t.id))this.removeAttr(s.attr,s.tag);return this}getTag(t,e=null){return t instanceof r&&(t=t.name),e&&e instanceof u&&(e=e.id),e!=null?this.tags.find(s=>s.tag.name==t&&s.tag.spaceId==e):this.tags.find(s=>s.tag.name==t&&s.tag.spaceId==this.spaceId)}get attrs(){return this._attrs.filter(t=>!t.isDeleted)}addAttr(t){if(t.isDeleted)throw Error("Cannot add an attribute marked as deleted to a note");if(t.isNew)throw Error("Cannot add an attribute that hasn't yet been saved to a note");const e=new o(this,t);return this._attrs.push(e),e}removeAttr(t,e=null){const s=this._attrs.find(a=>a.attrId==t.id&&a.tagId==(e==null?void 0:e.id));return s?(s.isNew?this._attrs=this._attrs.filter(a=>a!==s):s.delete(),this):this}getValue(t){var e;return t instanceof d&&(t=t.name),(e=this.attrs.find(s=>!s.tag&&s.attr.name==t))==null?void 0:e.value}getAttr(t){return t instanceof d&&(t=t.name),this.attrs.find(e=>!e.tag&&e.attr.name==t)}duplicate(){const t=new p;return t.id=this.id,t.date=this.date,t.text=this.text,this.space?t.space=this.space:t.spaceId=this.spaceId,t._tags=this.tags.map(e=>{const s=e.duplicate();return s.note=t,s}),t._attrs=this.attrs.map(e=>{const s=e.duplicate();return s.note=t,s}),this.ownTag&&t.setOwnTag(this.ownTag.duplicate()),t.state=this.state,t}toJSON(){return{state:this.state,id:this.id,date:this.date,text:this.text,spaceId:this.spaceId,ownTag:this.ownTag,tags:this.tags,attrs:this.attrs}}static fromJSON(t){const e=new p(t.text);if(e.id=t.id,e.date=new Date(t.date),e.spaceId=t.spaceId,t.ownTag&&e.setOwnTag(r.fromJSON(t.ownTag)),t.tags){e._tags=t.tags.map(s=>l.fromJSON(s));for(const s of e._tags)s.note=e}if(t.attrs){e._attrs=t.attrs.map(s=>o.fromJSON(s));for(const s of e._attrs)s.note=e}return e.state=t.state,e}validate(t=!1){let e=null;this.spaceId<=0?e="Note spaceId must be greater than zero.":!this.isNew&&this.id<=0?e="Note id must be greater than zero if in non-new state.":this.ownTag&&this.ownTag.spaceId!=this.spaceId&&(e="Note cannot belong to a different space than its own tag");const s=this._attrs.filter(a=>!a.isDeleted);for(let a=0;a<s.length;a++){const c=s[a];for(let g=a+1;g<s.length;g++){const I=s[g];c.attrId==I.attrId&&c.tagId==I.tagId&&(e=`Attr '${c.attr.name}' is duplicated.`)}}if(t&&e!=null)throw Error(e);if(this.ownTag&&!this.ownTag.validate(t))return!1;for(const a of this._tags)if(!a.validate(t))return!1;for(const a of this._attrs)if(!a.validate(t))return!1;return e==null}}export{d as A,p as N,u as S,r as T,o as a,l as b};
