import{R as o,r as S}from"./index-SSXOyoI7.js";import{n as $,M as U}from"./StoryHelpers-BgcIDcDq.js";import{P as c}from"./NoteSearch-DLX0tohj.js";import{P as u}from"./NoteList-I7963Vjf.js";import{N as l}from"./NoteViewer-dcVEBox3.js";import{P as j}from"./GroupedNoteList-yKWhaRmZ.js";/* empty css              */import{n as z}from"./NoteComponentHelpers-YOq-M9MO.js";import{N as K}from"./NotuRender-bVHJs86c.js";import"./MockHttpClient-CrRj0xgx.js";const Q=o.forwardRef(({isVisible:t=!0,selector:e,display:s,actionsBar:r,autoRefresh:m=!1},g)=>{const[p,P]=S.useState([]);if(e.onNotesRetrieved=n=>P(n),S.useEffect(()=>{t&&m&&e.requestNotes()},[t,m]),S.useImperativeHandle(g,()=>({refresh:()=>e.requestNotes()})),e.renderHooks(),s.renderHooks(),!t)return;function v(){if(r)return r()}return o.createElement("div",null,e.render(),v(),s.render(p))});Q.__docgenInfo={description:"",methods:[{name:"refresh",docblock:null,modifiers:[],params:[],returns:null}],displayName:"NotesPanel",props:{isVisible:{required:!1,tsType:{name:"boolean"},description:"Used for selectively showing/hiding the panel without losing all associated state",defaultValue:{value:"true",computed:!1}},selector:{required:!0,tsType:{name:"NotesPanelSelector"},description:""},display:{required:!0,tsType:{name:"NotesPanelDisplay"},description:""},actionsBar:{required:!1,tsType:{name:"signature",type:"function",raw:"() => JSX.Element",signature:{arguments:[],return:{name:"JSX.Element"}}},description:""},autoRefresh:{required:!1,tsType:{name:"boolean"},description:"Defaults to false, if true then every time the visibility is toggled from false to true, the panel will refresh itself",defaultValue:{value:"false",computed:!1}}}};const J=({notu:t=null,tags:e=null,selectedTag:s=null,onTagChanged:r=null,onFetchRequested:m=null,onFetched:g=null})=>{function p(){return e||t.getTags()}function P(n){const M=Number(n.target.value),R=p().find(X=>X.id==M)??null;R!=s&&r(R)}async function v(){if(!s)return;let n;t?n=await t.getRelatedNotes(s):n=await m(s),g&&g(n)}return o.createElement("div",{className:"field has-addons is-flex"},o.createElement("div",{className:"control is-flex-grow-1"},o.createElement("div",{className:"select is-fullwidth"},o.createElement("select",{onChange:P},o.createElement("option",{key:"0",value:null}),p().map(n=>o.createElement("option",{key:n.id,value:n.id},n.getQualifiedName(-1)))))),o.createElement("div",{className:"control"},o.createElement("button",{className:"button",onClick:v},"Search")))};class Y{constructor(e,s=null,r=null){this._notu=e,this._tags=s,this._selectedTag=r}async requestNotes(){if(!this._selectedTag)return;const e=await this._notu.getRelatedNotes(this._selectedTag);this.onNotesRetrieved(e)}handleFetchRequestFromNoteSearch(){return this.requestNotes(),Promise.resolve([])}renderHooks(){[this._selectedTag,this._setSelectedTag]=S.useState(this._selectedTag)}render(){return o.createElement(J,{tags:this._tags??this._notu.getTags(),selectedTag:this._selectedTag,onTagChanged:e=>this._setSelectedTag(e),onFetchRequested:()=>this.handleFetchRequestFromNoteSearch()})}}J.__docgenInfo={description:"",methods:[],displayName:"RelatedTagSelector",props:{notu:{required:!1,tsType:{name:"Notu"},description:"The client used for fetching results from the server, only add this if you want notes to be auto-fetched for you",defaultValue:{value:"null",computed:!1}},tags:{required:!1,tsType:{name:"Array",elements:[{name:"Tag"}],raw:"Array<Tag>"},description:"The set of tags which you're allowed to choose from, leave empty to get all from notu",defaultValue:{value:"null",computed:!1}},selectedTag:{required:!1,tsType:{name:"Tag"},description:"The tag which should start off as selected",defaultValue:{value:"null",computed:!1}},onTagChanged:{required:!1,tsType:{name:"signature",type:"function",raw:"(tag: Tag) => void",signature:{arguments:[{type:{name:"Tag"},name:"tag"}],return:{name:"void"}}},description:"Optional callback for handling changes to the selected tag",defaultValue:{value:"null",computed:!1}},onFetchRequested:{required:!1,tsType:{name:"signature",type:"function",raw:"(tag: Tag) => Promise<Array<Note>>",signature:{arguments:[{type:{name:"Tag"},name:"tag"}],return:{name:"Promise",elements:[{name:"Array",elements:[{name:"Note"}],raw:"Array<Note>"}],raw:"Promise<Array<Note>>"}}},description:"If notu param has not been defined, use this prop for handling the manual fetching of notes",defaultValue:{value:"null",computed:!1}},onFetched:{required:!1,tsType:{name:"signature",type:"function",raw:"(notes: Array<Note>) => void",signature:{arguments:[{type:{name:"Array",elements:[{name:"Note"}],raw:"Array<Note>"},name:"notes"}],return:{name:"void"}}},description:"Callback that gets fired when the search has been executed and notes returned",defaultValue:{value:"null",computed:!1}}}};const ce={title:"NotesPanel",component:Q,parameters:{layout:"padded"},tags:["autodocs"]},d=$("Space1",1).clean(),a=new U,i=new K(a,z,t=>null),h={args:{selector:new c(a,d,"Test"),display:new u(i,t=>[new l("Do something",e=>console.log("Something done"))])}},f={args:{selector:new c(a,d,"Test"),display:new j(i,t=>[new l("Do something",e=>console.log("Something done"))],t=>t.text.length).withHeaders((t,e)=>`Text length: ${t}`)}},w={args:{selector:new Y(a,null,null),display:new u(i,t=>[new l("Do something",e=>console.log("Something done"))])}},y={args:{selector:new c(a,d,"Test"),display:new u(i,t=>[new l("Do something",e=>{e.text+=" asdf",console.log("Something done")})]),autoRefresh:!0}},T={args:{selector:new c(a,d,"Test").withCustomQueryHandling((t,e)=>{throw Error("Boo hoo! Its broken")}),display:new u(i,t=>[new l("Do something",e=>console.log("Something done"))])}},N={args:{selector:new c(a,d,"Test"),display:new u(i,t=>[new l("Do something",e=>console.log(e))]),autoRefresh:!0}};var q,A,E;h.parameters={...h.parameters,docs:{...(q=h.parameters)==null?void 0:q.docs,source:{originalSource:`{
  args: {
    selector: new PanelNoteSearch((notu as any), space1, 'Test'),
    display: new PanelNoteList(renderTools, n => [new NoteViewerAction('Do something', n => console.log('Something done'))])
  }
}`,...(E=(A=h.parameters)==null?void 0:A.docs)==null?void 0:E.source}}};var _,k,b;f.parameters={...f.parameters,docs:{...(_=f.parameters)==null?void 0:_.docs,source:{originalSource:`{
  args: {
    selector: new PanelNoteSearch((notu as any), space1, 'Test'),
    display: new PanelGroupedNoteList(renderTools, n => [new NoteViewerAction('Do something', n => console.log('Something done'))], n => n.text.length).withHeaders((key, notes) => \`Text length: \${key}\`)
  }
}`,...(b=(k=f.parameters)==null?void 0:k.docs)==null?void 0:b.source}}};var D,V,x;w.parameters={...w.parameters,docs:{...(D=w.parameters)==null?void 0:D.docs,source:{originalSource:`{
  args: {
    selector: new PanelRelatedTagSelector((notu as any), null, null),
    display: new PanelNoteList(renderTools, n => [new NoteViewerAction('Do something', n => console.log('Something done'))])
  }
}`,...(x=(V=w.parameters)==null?void 0:V.docs)==null?void 0:x.source}}};var C,F,I;y.parameters={...y.parameters,docs:{...(C=y.parameters)==null?void 0:C.docs,source:{originalSource:`{
  args: {
    selector: new PanelNoteSearch((notu as any), space1, 'Test'),
    display: new PanelNoteList(renderTools, n => [new NoteViewerAction('Do something', n => {
      n.text += ' asdf';
      console.log('Something done');
    })]),
    autoRefresh: true
  }
}`,...(I=(F=y.parameters)==null?void 0:F.docs)==null?void 0:I.source}}};var H,L,G;T.parameters={...T.parameters,docs:{...(H=T.parameters)==null?void 0:H.docs,source:{originalSource:`{
  args: {
    selector: new PanelNoteSearch((notu as any), space1, 'Test').withCustomQueryHandling((query, spaceId) => {
      throw Error('Boo hoo! Its broken');
    }),
    display: new PanelNoteList(renderTools, n => [new NoteViewerAction('Do something', n => console.log('Something done'))])
  }
}`,...(G=(L=T.parameters)==null?void 0:L.docs)==null?void 0:G.source}}};var O,W,B;N.parameters={...N.parameters,docs:{...(O=N.parameters)==null?void 0:O.docs,source:{originalSource:`{
  args: {
    selector: new PanelNoteSearch((notu as any), space1, 'Test'),
    display: new PanelNoteList(renderTools, n => [new NoteViewerAction('Do something', n => console.log(n))]),
    autoRefresh: true
  }
}`,...(B=(W=N.parameters)==null?void 0:W.docs)==null?void 0:B.source}}};const ue=["Primary","Grouped","FetchRelatedTags","AutoRefresh","ErrorOnFetch","WorksProperlyWithChecklists"];export{y as AutoRefresh,T as ErrorOnFetch,w as FetchRelatedTags,f as Grouped,h as Primary,N as WorksProperlyWithChecklists,ue as __namedExportsOrder,ce as default};
