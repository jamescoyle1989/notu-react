import{r as l,R as a}from"./index-SSXOyoI7.js";/* empty css              */const c=({space:n,notu:e=null,query:r="",onQueryChanged:s=null,onFetchRequested:d=null,onFetched:i=null})=>{const[u,o]=l.useState(null);function h(t){o(null),s&&s(t.target.value)}async function m(){try{let t;e?t=await e.getNotes(r,n.id):t=await d(r,n),i&&i(t)}catch(t){o(t.message)}}function p(){return u?a.createElement("button",{className:"button is-danger",disabled:!0,title:u},"Error!"):a.createElement("button",{className:"button",onClick:m},"Search")}return a.createElement("div",{className:"field has-addons is-flex"},a.createElement("div",{className:"control is-flex-grow-1"},a.createElement("input",{type:"text",className:"input",disabled:!s,value:r,onChange:h})),a.createElement("div",{className:"control"},p()))};class g{constructor(e,r,s){this._notu=e,this._space=r,this._query=s}withCustomQueryHandling(e){return this._customQueryHandling=e,this}async requestNotes(){const e=this._customQueryHandling?await this._customQueryHandling(this._query,this._space.id):await this._notu.getNotes(this._query,this._space.id);this.onNotesRetrieved(e)}async handleFetchRequestFromNoteSearch(){return await this.requestNotes(),Promise.resolve([])}renderHooks(){[this._query,this._setQuery]=l.useState(this._query)}render(){return a.createElement(c,{space:this._space,query:this._query,onQueryChanged:e=>this._setQuery(e),onFetchRequested:async()=>await this.handleFetchRequestFromNoteSearch()})}}c.__docgenInfo={description:"",methods:[],displayName:"NoteSearch",props:{space:{required:!0,tsType:{name:"Space"},description:"The space which we're fetching notes from"},notu:{required:!1,tsType:{name:"Notu"},description:"The client used for fetching results from the server, only add this if you want notes to be auto-fetched for you",defaultValue:{value:"null",computed:!1}},query:{required:!1,tsType:{name:"string"},description:"The query string which the search field will display and use for querying",defaultValue:{value:"''",computed:!1}},onQueryChanged:{required:!1,tsType:{name:"signature",type:"function",raw:"(query: string) => void",signature:{arguments:[{type:{name:"string"},name:"query"}],return:{name:"void"}}},description:"Optional callback for handling changes to the query text",defaultValue:{value:"null",computed:!1}},onFetchRequested:{required:!1,tsType:{name:"signature",type:"function",raw:"(query: string, space: Space) => Promise<Array<Note>>",signature:{arguments:[{type:{name:"string"},name:"query"},{type:{name:"Space"},name:"space"}],return:{name:"Promise",elements:[{name:"Array",elements:[{name:"Note"}],raw:"Array<Note>"}],raw:"Promise<Array<Note>>"}}},description:"If notu param has not been defined, then use this prop for handling the manual fetching of notes",defaultValue:{value:"null",computed:!1}},onFetched:{required:!1,tsType:{name:"signature",type:"function",raw:"(notes: Array<Note>) => void",signature:{arguments:[{type:{name:"Array",elements:[{name:"Note"}],raw:"Array<Note>"},name:"notes"}],return:{name:"void"}}},description:"Callback that gets fired when the search has been executed and notes returned",defaultValue:{value:"null",computed:!1}}}};export{c as N,g as P};
