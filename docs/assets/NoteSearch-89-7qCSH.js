import{j as d,a as n}from"./jsx-runtime-VmuvLVu_.js";import{r as h}from"./index-XiNr8FW2.js";/* empty css              */const o=({space:r,notu:e=null,query:t="",onQueryChanged:a=null,onFetchRequested:l=null,onFetched:i=null})=>{function u(s){a&&a(s.target.value)}async function c(){let s;e?s=await e.getNotes(t,r.id):s=await l(t,r),i&&i(s)}return d("div",{className:"field has-addons is-flex",children:[n("div",{className:"control is-flex-grow-1",children:n("input",{type:"text",className:"input",disabled:!a,value:t,onChange:u})}),n("div",{className:"control",children:n("button",{className:"button",onClick:c,children:"Search"})})]})};class y{constructor(e,t,a){this._notu=e,this._space=t,this._query=a}async requestNotes(){const e=await this._notu.getNotes(this._query,this._space.id);this.onNotesRetrieved(e)}handleFetchRequestFromNoteSearch(){return this.requestNotes(),Promise.resolve([])}render(){const[e,t]=h.useState(this._query);return this._query=e,n(o,{space:this._space,query:e,onQueryChanged:a=>t(a),onFetchRequested:()=>this.handleFetchRequestFromNoteSearch()})}}try{o.displayName="NoteSearch",o.__docgenInfo={description:"",displayName:"NoteSearch",props:{space:{defaultValue:null,description:"The space which we're fetching notes from",name:"space",required:!0,type:{name:"Space"}},notu:{defaultValue:{value:"null"},description:"The client used for fetching results from the server, only add this if you want notes to be auto-fetched for you",name:"notu",required:!1,type:{name:"Notu"}},query:{defaultValue:{value:""},description:"The query string which the search field will display and use for querying",name:"query",required:!1,type:{name:"string"}},onQueryChanged:{defaultValue:{value:"null"},description:"Optional callback for handling changes to the query text",name:"onQueryChanged",required:!1,type:{name:"(query: string) => void"}},onFetchRequested:{defaultValue:{value:"null"},description:"If notu param has not been defined, then use this prop for handling the manual fetching of notes",name:"onFetchRequested",required:!1,type:{name:"(query: string, space: Space) => Promise<Note[]>"}},onFetched:{defaultValue:{value:"null"},description:"Callback that gets fired when the search has been executed and notes returned",name:"onFetched",required:!1,type:{name:"(notes: Note[]) => void"}}}}}catch{}export{o as N,y as P};
