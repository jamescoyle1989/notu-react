import{j as P,a as y}from"./jsx-runtime-VmuvLVu_.js";import{R as D,r as a}from"./index-XiNr8FW2.js";import{N as F}from"./NoteSearch-vy-Cx2Un.js";import{N as M}from"./NoteList-Lh2J7ZWH.js";import{S as L,N}from"./notu-B7rita-q.js";import{N as b}from"./NoteViewer-B4byLE0Z.js";import"./_commonjsHelpers-5-cIlDoe.js";/* empty css              */import"./NoteTagBadge-AUqrHrt_.js";import"./NotuRender-CxO7SIv6.js";import"./NoteAttrBadge-2pOiyd8Z.js";const d=D.forwardRef(({space:e,notuClient:n=null,onFetchRequested:o=null,defaultQuery:r=null,onQueryChanged:c=null,noteActionsGenerator:v,actionsPanel:f=null,isVisible:u=!0,noteViewer:V=null},A)=>{const[l,S]=a.useState(r??""),[Q,m]=a.useState([]),[T,_]=a.useState(!1);a.useImperativeHandle(A,()=>({refresh:p,setQuery:h})),a.useEffect(()=>{u&&!T&&(_(!0),p())},[u]);async function p(){let t;n?t=await n.getNotes(l,e.id):t=await o(l,e),m(t)}function h(t){S(t),c&&c(t)}if(!u)return;function I(){if(f)return f()}return P("div",{children:[y(F,{notuClient:n,space:e,onFetched:m,query:l,onFetchRequested:o,onQueryChanged:h}),I(),y(M,{notes:Q,contextSpaceId:e.id,actionsGenerator:v,noteViewer:V})]})});try{d.displayName="FilteredNoteList",d.__docgenInfo={description:"",displayName:"FilteredNoteList",props:{space:{defaultValue:null,description:"The space which we're fetching notes from",name:"space",required:!0,type:{name:"Space"}},notuClient:{defaultValue:{value:"null"},description:"The client used for fetching results from the server, only add this if you want notes to be auto-fetched for you",name:"notuClient",required:!1,type:{name:"CachedClient"}},onFetchRequested:{defaultValue:{value:"null"},description:"If notuClient has not been defined, then use this prop for handling the manual fetching of notes",name:"onFetchRequested",required:!1,type:{name:"(query: string, space: Space) => Promise<Note[]>"}},defaultQuery:{defaultValue:{value:"null"},description:"The optional default value for the search field to have. If not defined then defaults to empty",name:"defaultQuery",required:!1,type:{name:"string"}},onQueryChanged:{defaultValue:{value:"null"},description:"Optional handler for when the query gets changed",name:"onQueryChanged",required:!1,type:{name:"(query: string) => void"}},noteActionsGenerator:{defaultValue:null,description:"The set of options which get generated for each note",name:"noteActionsGenerator",required:!0,type:{name:"(note: Note) => NoteViewerAction[]"}},actionsPanel:{defaultValue:{value:"null"},description:"",name:"actionsPanel",required:!1,type:{name:"() => Element"}},isVisible:{defaultValue:{value:"true"},description:"",name:"isVisible",required:!1,type:{name:"boolean"}},noteViewer:{defaultValue:{value:"null"},description:"",name:"noteViewer",required:!1,type:{name:"(note: Note, actions: NoteViewerAction[], isSelected: boolean) => Element"}}}}}catch{}const J={title:"FilteredNoteList",component:d,parameters:{layout:"padded"},tags:["autodocs"]},i=new L("Space 1");i.id=1;const s={args:{space:i,onFetchRequested:(e,n)=>{const o=new N("I am a first note").in(i).at(new Date(2e3+Math.floor(Math.random()*50),0,14,20,6));o.id=123;const r=new N("And I'm another note").in(i).at(new Date(2e3+Math.floor(Math.random()*50),0,15,21,15));return r.id=124,Promise.resolve([o,r])},defaultQuery:"#Tag1 AND NOT #Tag2",noteActionsGenerator:e=>[new b("Do something",async n=>Promise.resolve(!0))],isVisible:!0}};var g,w,q;s.parameters={...s.parameters,docs:{...(g=s.parameters)==null?void 0:g.docs,source:{originalSource:`{
  args: {
    space: space1,
    onFetchRequested: (query, space) => {
      const note1 = new Note('I am a first note').in(space1).at(new Date(2000 + Math.floor(Math.random() * 50), 0, 14, 20, 6));
      note1.id = 123;
      const note2 = new Note('And I\\'m another note').in(space1).at(new Date(2000 + Math.floor(Math.random() * 50), 0, 15, 21, 15));
      note2.id = 124;
      return Promise.resolve([note1, note2]);
    },
    defaultQuery: '#Tag1 AND NOT #Tag2',
    noteActionsGenerator: note => [new NoteViewerAction('Do something', async n => Promise.resolve(true))],
    isVisible: true
  }
}`,...(q=(w=s.parameters)==null?void 0:w.docs)==null?void 0:q.source}}};const K=["Primary"];export{s as Primary,K as __namedExportsOrder,J as default};
