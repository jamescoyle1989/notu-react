import{a as e,j as t}from"./jsx-runtime-VmuvLVu_.js";import{r as S}from"./index-XiNr8FW2.js";/* empty css              */import{n as T,A as N}from"./StoryHelpers-Nro3gCTf.js";import{M as _}from"./MockHttpClient-GIFSx4qd.js";import"./_commonjsHelpers-5-cIlDoe.js";const i=({notuClient:n,attr:r,onConfirm:y})=>{if(!r.space)throw new Error("Attr must define the space that it belongs to prior to editing");const[s,b]=S.useState(null),c="#969DA3";async function E(o){o.preventDefault(),r.name=o.target.elements.name.value,r.description=o.target.elements.description.value,r.type=o.target.elements.type.value;const d=o.target.elements.color.value.toUpperCase();r.color=d==c?null:d;try{await y(r)&&n.saveAttr(r)}catch(m){b(m.message)}}function A(){if(s)return e("div",{className:"notification is-danger",children:t("label",{children:["Error: ",s]})})}return e("form",{onSubmit:E,children:t("fieldset",{children:[A(),t("div",{className:"field",children:[e("label",{className:"label",children:"Name"}),e("div",{className:"control",children:e("input",{type:"text",className:"input",name:"name",defaultValue:r.name})})]}),t("div",{className:"field",children:[e("label",{className:"label",children:"Color"}),e("div",{className:"control",children:e("input",{name:"color",type:"color",className:"input",defaultValue:r.color??c})})]}),t("div",{className:"field",children:[e("label",{className:"label",children:"Description"}),e("div",{className:"control",children:e("textarea",{defaultValue:r.description,name:"description",className:"textarea"})})]}),t("div",{className:"field",children:[e("label",{className:"label",children:"Type"}),e("div",{className:"control",children:e("div",{className:"select",children:t("select",{name:"type",defaultValue:r.type,children:[e("option",{value:"TEXT",children:"Text"}),e("option",{value:"NUMBER",children:"Number"}),e("option",{value:"BOOLEAN",children:"Boolean"}),e("option",{value:"DATE",children:"Date"})]})})})]}),e("div",{className:"field",children:e("button",{type:"submit",className:"button is-link",children:"Confirm"})})]})})};try{i.displayName="AttrEditor",i.__docgenInfo={description:"",displayName:"AttrEditor",props:{notuClient:{defaultValue:null,description:"Used for saving the attr once changes have been confirmed",name:"notuClient",required:!0,type:{name:"NotuClient"}},attr:{defaultValue:null,description:"The attr to be edited",name:"attr",required:!0,type:{name:"Attr"}},onConfirm:{defaultValue:null,description:"Called when the confirm button is clicked. A false return value will prevent saving, so will a thrown error, which will also display on the attr editor",name:"onConfirm",required:!0,type:{name:"(attr: Attr) => Promise<boolean>"}}}}}catch{}const P={title:"AttrEditor",component:i,parameters:{layout:"padded"},tags:["autodocs"]},v=T("Space 1",1).clean(),w=new _,a={args:{notuClient:w,attr:new N("Test").in(v),onConfirm:n=>(console.log("Confirm clicked",n),Promise.resolve(!0))}},l={args:{notuClient:w,attr:new N("Test").in(v),onConfirm:n=>{throw console.log("Confirm clicked",n),Error("Something went wrong")}}};var u,p,f;a.parameters={...a.parameters,docs:{...(u=a.parameters)==null?void 0:u.docs,source:{originalSource:`{
  args: {
    notuClient: (notuClient as any),
    attr: new Attr('Test').in(space1),
    onConfirm: attr => {
      console.log('Confirm clicked', attr);
      return Promise.resolve(true);
    }
  }
}`,...(f=(p=a.parameters)==null?void 0:p.docs)==null?void 0:f.source}}};var h,g,C;l.parameters={...l.parameters,docs:{...(h=l.parameters)==null?void 0:h.docs,source:{originalSource:`{
  args: {
    notuClient: (notuClient as any),
    attr: new Attr('Test').in(space1),
    onConfirm: attr => {
      console.log('Confirm clicked', attr);
      throw Error('Something went wrong');
    }
  }
}`,...(C=(g=l.parameters)==null?void 0:g.docs)==null?void 0:C.source}}};const j=["Primary","ShowsErrorMessageOnConfirm"];export{a as Primary,l as ShowsErrorMessageOnConfirm,j as __namedExportsOrder,P as default};
